AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Realtor CRM MVP (Textract ingest) - SES TopicARN fix + optional CDN/DNS
Parameters:
  BrandName:
    Type: String
    Default: Damien Sanchez
  Brokerage:
    Type: String
    Default: Berkshire Hathaway HomeServices Fox & Roach, Realtors
  BusinessAddress:
    Type: String
    Default: 3261 PA-100, Suite 100, Macungie, PA 18062
  BusinessPhone:
    Type: String
    Default: (610) 740-4804
  ReplyToEmail:
    Type: String
    Default: dame.sanchez@foxroach.com
  BrandLogoUrl:
    Type: String
    Default: https://openhouse.dametherealtor.com/Assets/berkshireFoxRealtors.jpg
    Description: Public HTTPS URL to the BHHS Fox & Roach logo image
  HeadshotUrl:
    Type: String
    Default: https://openhouse.dametherealtor.com/Assets/damesBeautifulHeadshot.jpg
    Description: Public HTTPS URL to Damien's headshot
  LinkTrackingDomain:
    Type: String
    Default: ''
    Description: Optional custom tracking subdomain, e.g. links.dametherealtor.com
      (leave blank to use SES default)
  ContactListName:
    Type: String
    Default: crm-contacts
    Description: SES contact list for subscription management
  ProjectName:
    Type: String
    Default: crm
  DomainName:
    Type: String
    Default: dametherealtor.com
  HostedZoneId:
    Type: String
    Default: Z03939112QD8ZZ66PQA9D
  PublicSubdomain:
    Type: String
    Default: openhouse
  AdminSubdomain:
    Type: String
    Default: admin
  SesFromEmail:
    Type: String
    Default: damien@dametherealtor.com
  CreateEmailIdentity:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Set 'true' only if you want CFN to create/verify a single email
      identity. Leave 'false' when the domain is verified in SES.
  ExportsBucketName:
    Type: String
    Default: crm-exports-123456789012
  Region:
    Type: String
    Default: us-east-1
  EnableCDN:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: true = create ACM/CloudFront/Route53 (requires real DomainName +
      HostedZoneId)
Conditions:
  UseCDN: !Equals
    - !Ref EnableCDN
    - 'true'
  CreateEmailIdentityTrue: !Equals
    - !Ref CreateEmailIdentity
    - 'true'
  HasLinkTrackingDomain: !Not
    - !Equals
      - !Ref LinkTrackingDomain
      - ''
Resources:
  LeadIntakeFnUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref LeadIntakeFn
      AuthType: NONE
      Cors:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
        AllowHeaders:
          - '*'
  AllowPublicInvokeLeadIntakeFnUrl:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LeadIntakeFn
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
      FunctionUrlAuthType: NONE
  QuickSendFnUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref QuickSendFn
      AuthType: NONE
      Cors:
        AllowOrigins:
          - '*'
        AllowMethods:
          - POST
        AllowHeaders:
          - '*'
  AllowPublicInvokeQuickSendFnUrl:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref QuickSendFn
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
      FunctionUrlAuthType: NONE
  ExportCsvFnUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref ExportCsvFn
      AuthType: NONE
      Cors:
        AllowOrigins:
          - '*'
        AllowMethods:
          - POST
        AllowHeaders:
          - '*'
  AllowPublicInvokeExportCsvFnUrl:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ExportCsvFn
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
      FunctionUrlAuthType: NONE
  TextractUploadUrlFnUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref TextractUploadUrlFn
      AuthType: NONE
      Cors:
        AllowOrigins:
          - '*'
        AllowMethods:
          - POST
        AllowHeaders:
          - '*'
  AllowPublicInvokeTextractUploadUrlFnUrl:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TextractUploadUrlFn
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
      FunctionUrlAuthType: NONE
  SESContactList:
    Type: AWS::SES::ContactList
    Properties:
      ContactListName: !Ref ContactListName
      Description: CRM contact list
      Topics:
        - TopicName: general
          DisplayName: General updates
          Description: Drips and one-off messages
          DefaultSubscriptionStatus: OPT_IN
  LeadsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Leads
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: LeadID
          AttributeType: S
        - AttributeName: Email
          AttributeType: S
        - AttributeName: Source
          AttributeType: S
        - AttributeName: CreatedAt
          AttributeType: S
      KeySchema:
        - AttributeName: LeadID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: GSI_Email
          KeySchema:
            - AttributeName: Email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: GSI_SourceCreatedAt
          KeySchema:
            - AttributeName: Source
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
  PublicSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-public-site-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  AdminSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-admin-site-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  ExportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ExportsBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  UploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ProjectName}-uploads-${AWS::AccountId}
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - PUT
              - GET
              - HEAD
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  PublicSiteBucketPolicy:
    Condition: UseCDN
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublicSiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontOACReadPublic
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${PublicSiteBucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${PublicSiteDistribution}
  AdminSiteBucketPolicy:
    Condition: UseCDN
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AdminSiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontOACReadAdmin
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${AdminSiteBucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${AdminSiteDistribution}
  ACMCertPublic:
    Condition: UseCDN
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub ${PublicSubdomain}.${DomainName}
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub ${PublicSubdomain}.${DomainName}
          HostedZoneId: !Ref HostedZoneId
      CertificateTransparencyLoggingPreference: ENABLED
  ACMCertAdmin:
    Condition: UseCDN
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub ${AdminSubdomain}.${DomainName}
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub ${AdminSubdomain}.${DomainName}
          HostedZoneId: !Ref HostedZoneId
      CertificateTransparencyLoggingPreference: ENABLED
  CFOriginAccessPublic:
    Condition: UseCDN
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: OAC for public site
        Name: !Sub ${AWS::StackName}-oac-public
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  CFOriginAccessAdmin:
    Condition: UseCDN
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: OAC for admin site
        Name: !Sub ${AWS::StackName}-oac-admin
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  PublicSiteDistribution:
    Condition: UseCDN
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        Aliases:
          - !Sub ${PublicSubdomain}.${DomainName}
        Origins:
          - DomainName: !GetAtt PublicSiteBucket.RegionalDomainName
            Id: public-origin
            S3OriginConfig: {}
            OriginAccessControlId: !Ref CFOriginAccessPublic
        DefaultCacheBehavior:
          TargetOriginId: public-origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
        ViewerCertificate:
          AcmCertificateArn: !Ref ACMCertPublic
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0
  AdminSiteDistribution:
    Condition: UseCDN
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        Aliases:
          - !Sub ${AdminSubdomain}.${DomainName}
        Origins:
          - DomainName: !GetAtt AdminSiteBucket.RegionalDomainName
            Id: admin-origin
            S3OriginConfig: {}
            OriginAccessControlId: !Ref CFOriginAccessAdmin
        DefaultCacheBehavior:
          TargetOriginId: admin-origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
        ViewerCertificate:
          AcmCertificateArn: !Ref ACMCertAdmin
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0
  DNSRecordPublic:
    Condition: UseCDN
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub ${PublicSubdomain}.${DomainName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt PublicSiteDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
  DNSRecordAdmin:
    Condition: UseCDN
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub ${AdminSubdomain}.${DomainName}.
      Type: A
      AliasTarget:
        DNSName: !GetAtt AdminSiteDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
  DdbAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: DDB & logs
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
            Resource:
              - !GetAtt LeadsTable.Arn
              - !Sub ${LeadsTable.Arn}/index/*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
  SesSendPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allow SES send
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendTemplatedEmail
              - ses:SendBulkEmail
            Resource: '*'
  S3ExportsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allow S3 put/get to exports
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:AbortMultipartUpload
            Resource: !Sub arn:aws:s3:::${ExportsBucketName}/*
  TextractPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: S3 read for uploads + Textract calls
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:AbortMultipartUpload
            Resource: !Sub arn:aws:s3:::${ProjectName}-uploads-${AWS::AccountId}/*
          - Effect: Allow
            Action:
              - textract:DetectDocumentText
              - textract:AnalyzeDocument
            Resource: '*'
  LeadIntakeFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lead-intake
      Runtime: python3.12
      Handler: index.handler
      Timeout: 30
      Policies:
        - !Ref DdbAccessPolicy
        - !Ref SesSendPolicy
      Environment:
        Variables:
          LEADS_TABLE: !Ref LeadsTable
          FROM_EMAIL: !Ref SesFromEmail
          SES_CONFIG_SET: !Ref SesCfgSet
          CONTACT_LIST: !Ref ContactListName
          REPLY_TO: !Ref ReplyToEmail
          BRAND_NAME: !Ref BrandName
          BROKERAGE: !Ref Brokerage
          BUSINESS_ADDRESS: !Ref BusinessAddress
          BUSINESS_PHONE: !Ref BusinessPhone
          BRAND_LOGO_URL: !Ref BrandLogoUrl
          HEADSHOT_URL: !Ref HeadshotUrl
      InlineCode: |
        import os, json, uuid, datetime, boto3
        ddb = boto3.resource('dynamodb')
        table = ddb.Table(os.environ.get('LEADS_TABLE'))
        ses = boto3.client('sesv2')

        def handler(event, context):
            body = event.get('body')
            if isinstance(body, str): body = json.loads(body or "{}")
            elif body is None: body = {}
            name = (body.get('name') or "").strip(); email = (body.get('email') or "").strip()
            if not name or not email:
                return {"statusCode":400,"body":json.dumps({"error":"name and email required"})}
            lead_id = str(uuid.uuid4()); now = datetime.datetime.utcnow().isoformat()
            item = {"LeadID": lead_id,"Name": name,"Email": email,"Phone": (body.get('phone') or "").strip(),
                    "Source": (body.get('source') or "").strip(),"Notes": (body.get('notes') or "").strip(),
                    "CreatedAt": now,"OpenCount": 0,"ClickCount": 0,"Tags": [],
                    "SentStages": {"d0": True,"d2": False,"d5": False,"d30": False}}
            table.put_item(Item=item)
            try:
                ses.send_email(
                    FromEmailAddress=os.environ['FROM_EMAIL'],
                    Destination={"ToAddresses":[email]},
                    ReplyToAddresses=[os.environ['REPLY_TO']],
                    ConfigurationSetName=os.environ['SES_CONFIG_SET'],
                    ListManagementOptions={"ContactListName": os.environ["CONTACT_LIST"], "TopicName": "general"},
                    EmailTags=[{"Name":"lead_id","Value":lead_id},{"Name":"campaign","Value":"day0"},{"Name":"lead_stage","Value":"new"}],
                    Content={"Template":{"TemplateName":"Day0_Thanks","TemplateData":json.dumps({
                        "name": name,
                        "source": item["Source"],
                        "brandName": os.environ.get("BRAND_NAME",""),
                        "brokerage": os.environ.get("BROKERAGE",""),
                        "businessAddress": os.environ.get("BUSINESS_ADDRESS",""),
                        "businessPhone": os.environ.get("BUSINESS_PHONE",""),
                        "brandLogoUrl": os.environ.get("BRAND_LOGO_URL",""),
                        "headshotUrl": os.environ.get("HEADSHOT_URL","")
                    })}}
                )
            except Exception as e:
                print("SES error", e)
            return {"statusCode":200,"body":json.dumps({"leadId":lead_id})}
  SendDripFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: send-drip
      Runtime: python3.12
      Handler: index.handler
      Timeout: 60
      Policies:
        - !Ref DdbAccessPolicy
        - !Ref SesSendPolicy
      Environment:
        Variables:
          LEADS_TABLE: !Ref LeadsTable
          FROM_EMAIL: !Ref SesFromEmail
          SES_CONFIG_SET: !Ref SesCfgSet
          CONTACT_LIST: !Ref ContactListName
          REPLY_TO: !Ref ReplyToEmail
          BRAND_NAME: !Ref BrandName
          BROKERAGE: !Ref Brokerage
          BUSINESS_ADDRESS: !Ref BusinessAddress
          BUSINESS_PHONE: !Ref BusinessPhone
          BRAND_LOGO_URL: !Ref BrandLogoUrl
          HEADSHOT_URL: !Ref HeadshotUrl
      InlineCode: |
        import os, json, boto3, datetime
        ddb = boto3.resource('dynamodb')
        table = ddb.Table(os.environ.get('LEADS_TABLE'))
        ses = boto3.client('sesv2')

        def days_since(iso):
          dt = datetime.datetime.fromisoformat(iso.replace('Z','')); return (datetime.datetime.utcnow()-dt).days

        def ctx():
          return {"brandName":os.environ.get("BRAND_NAME",""),"brokerage":os.environ.get("BROKERAGE",""),
                  "businessAddress":os.environ.get("BUSINESS_ADDRESS",""),"businessPhone":os.environ.get("BUSINESS_PHONE",""),
                  "brandLogoUrl":os.environ.get("BRAND_LOGO_URL",""),"headshotUrl":os.environ.get("HEADSHOT_URL","")}

        def send(to_email, template, data, tags):
          ses.send_email(
            FromEmailAddress=os.environ['FROM_EMAIL'],
            Destination={"ToAddresses":[to_email]},
            ReplyToAddresses=[os.environ['REPLY_TO']],
            ConfigurationSetName=os.environ['SES_CONFIG_SET'],
            ListManagementOptions={"ContactListName": os.environ["CONTACT_LIST"], "TopicName": "general"},
            EmailTags=tags,
            Content={"Template":{"TemplateName":template,"TemplateData":json.dumps(data)}}
          )

        def handler(event, context):
          scan_kwargs = {}; sent = {"d2":0,"d5":0,"d30":0}
          while True:
            resp = table.scan(**scan_kwargs)
            for it in resp.get('Items', []):
              if it.get("EmailDeliverability") == "bad": continue
              created = it.get('CreatedAt'); stages = it.get('SentStages', {}); email = it.get('Email'); name = it.get("Name","")
              if not created or not email: continue
              d = days_since(created); base = ctx()
              if not stages.get('d2') and d >= 2:
                send(email, "Day2_FollowUp", {"name": name, **base}, [
                  {"Name":"lead_id","Value":it['LeadID']},{"Name":"campaign","Value":"d2"},{"Name":"lead_stage","Value":"nurture"}])
                table.update_item(Key={"LeadID":it["LeadID"]}, UpdateExpression="SET SentStages.d2=:t", ExpressionAttributeValues={":t": True}); sent["d2"] += 1
              if not stages.get('d5') and d >= 5:
                send(email, "Day5_CheckIn", {"name": name, **base}, [
                  {"Name":"lead_id","Value":it['LeadID']},{"Name":"campaign","Value":"d5"},{"Name":"lead_stage","Value":"nurture"}])
                table.update_item(Key={"LeadID":it["LeadID"]}, UpdateExpression="SET SentStages.d5=:t", ExpressionAttributeValues={":t": True}); sent["d5"] += 1
              if not stages.get('d30') and d >= 30:
                send(email, "Day30_CheckIn", {"name": name, **base}, [
                  {"Name":"lead_id","Value":it['LeadID']},{"Name":"campaign","Value":"d30"},{"Name":"lead_stage","Value":"nurture"}])
                table.update_item(Key={"LeadID":it["LeadID"]}, UpdateExpression="SET SentStages.d30=:t", ExpressionAttributeValues={":t": True}); sent["d30"] += 1
            if 'LastEvaluatedKey' in resp: scan_kwargs['ExclusiveStartKey'] = resp['LastEvaluatedKey']
            else: break
          return {"statusCode":200,"body":json.dumps(sent)}
  EngagementUpdateFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: engagement-update
      Runtime: python3.12
      Handler: index.handler
      Timeout: 30
      Policies:
        - !Ref DdbAccessPolicy
      Environment:
        Variables:
          LEADS_TABLE: !Ref LeadsTable
      InlineCode: |
        import os, json, boto3, datetime
        ddb = boto3.resource('dynamodb')
        table = ddb.Table(os.environ.get('LEADS_TABLE'))

        def _first(v):
          if isinstance(v, list):
            return v[0] if v else None
          return v

        def handler(event, context):
          for rec in event.get('Records', []):
            msg = rec.get('Sns', {}).get('Message')
            if not msg:
              continue
            try:
              data = json.loads(msg)
            except Exception:
              continue

            etype = (data.get('eventType') or '').lower()
            mail  = data.get('mail') or {}
            tags  = mail.get('tags') or {}
            lead_id = _first(tags.get('lead_id')) or _first(tags.get('LeadID'))
            if not lead_id:
              continue

            ts = datetime.datetime.utcnow().isoformat()
            updates, eav = [], {}

            if etype == 'open':
              updates += ["OpenCount = if_not_exists(OpenCount,:z)+:one", "LastOpenedAt = :ts"]
              eav.update({":z":0, ":one":1, ":ts": ts})
            elif etype == 'click':
              updates += ["ClickCount = if_not_exists(ClickCount,:z)+:one", "LastClickedAt = :ts"]
              eav.update({":z":0, ":one":1, ":ts": ts})
            elif etype == 'delivery':
              updates += ["LastDeliveredAt = :ts", "EmailDeliverability = :good"]
              eav.update({":ts": ts, ":good": "good"})
            elif etype in ('bounce','complaint'):
              updates += ["EmailDeliverability = :bad"]
              eav[":bad"] = "bad"
              if etype == 'bounce':
                updates.append("LastBouncedAt = :ts"); eav[":ts"] = ts
              else:
                updates.append("LastComplainedAt = :ts"); eav[":ts"] = ts

            if updates:
              table.update_item(
                Key={"LeadID": lead_id},
                UpdateExpression="SET " + ", ".join(updates),
                ExpressionAttributeValues=eav
              )

          return {"statusCode":200,"body":"ok"}
  SegmentationFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: segmentation
      Runtime: python3.12
      Handler: index.handler
      Timeout: 60
      Policies:
        - !Ref DdbAccessPolicy
      Environment:
        Variables:
          LEADS_TABLE: !Ref LeadsTable
      InlineCode: |
        import os, boto3, json
        ddb = boto3.resource('dynamodb')
        table = ddb.Table(os.environ.get('LEADS_TABLE'))

        def handler(event, context):
          updated = 0; start_key = None
          while True:
            scan_kwargs = {}
            if start_key: scan_kwargs['ExclusiveStartKey'] = start_key
            resp = table.scan(**scan_kwargs)
            for item in resp.get('Items', []):
              o = int(item.get('OpenCount',0)); c = int(item.get('ClickCount',0))
              tags = set(item.get('Tags', []))
              new_tag = 'Hot' if (c >= 1 or o >= 3) else ('Warm' if o >= 1 else 'Cold')
              if new_tag not in tags:
                tags -= {'Hot','Warm','Cold'}; tags.add(new_tag)
                table.update_item(Key={"LeadID": item["LeadID"]}, UpdateExpression="SET Tags = :t", ExpressionAttributeValues={":t": list(tags)})
                updated += 1
            if 'LastEvaluatedKey' in resp: start_key = resp['LastEvaluatedKey']
            else: break
          return {"statusCode":200,"body":json.dumps({"updated":updated})}
  ExportCsvFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: export-csv
      Runtime: python3.12
      Handler: index.handler
      Timeout: 60
      Policies:
        - !Ref DdbAccessPolicy
        - !Ref S3ExportsPolicy
      Environment:
        Variables:
          LEADS_TABLE: !Ref LeadsTable
          EXPORTS_BUCKET: !Ref ExportsBucketName
      InlineCode: |
        import os, io, csv, json, boto3, datetime
        ddb = boto3.resource('dynamodb'); s3 = boto3.client('s3')
        table = ddb.Table(os.environ.get('LEADS_TABLE'))

        def handler(event, context):
            rows, start_key = [], None
            while True:
                kwargs = {}
                if start_key: kwargs['ExclusiveStartKey'] = start_key
                resp = table.scan(**kwargs)
                for it in resp.get('Items', []):
                    rows.append({"LeadID": it.get("LeadID",""),"Name": it.get("Name",""),"Email": it.get("Email",""),
                                "Phone": it.get("Phone",""),"Source": it.get("Source",""),"CreatedAt": it.get("CreatedAt",""),
                                "OpenCount": it.get("OpenCount",0),"ClickCount": it.get("ClickCount",0),"Tags": ",".join(it.get("Tags",[]))})
                if 'LastEvaluatedKey' in resp: start_key = resp['LastEvaluatedKey']
                else: break
            now = datetime.datetime.utcnow().strftime("%Y%m%d-%H%M%S"); key = f"exports/leads-{now}.csv"
            fieldnames = list(rows[0].keys()) if rows else ["LeadID","Name","Email","Phone","Source","CreatedAt","OpenCount","ClickCount","Tags"]
            buf = io.StringIO(); writer = csv.DictWriter(buf, fieldnames=fieldnames)
            writer.writeheader(); [writer.writerow(r) for r in rows]
            s3.put_object(Bucket=os.environ['EXPORTS_BUCKET'], Key=key, Body=buf.getvalue().encode('utf-8'), ContentType='text/csv')
            url = s3.generate_presigned_url('get_object', Params={'Bucket': os.environ['EXPORTS_BUCKET'], 'Key': key}, ExpiresIn=3600)
            return {"statusCode":200,"body":json.dumps({"url": url})}
  QuickSendFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: quick-send
      Runtime: python3.12
      Handler: index.handler
      Timeout: 30
      Policies:
        - !Ref DdbAccessPolicy
        - !Ref SesSendPolicy
      Environment:
        Variables:
          LEADS_TABLE: !Ref LeadsTable
          FROM_EMAIL: !Ref SesFromEmail
          SES_CONFIG_SET: !Ref SesCfgSet
          CONTACT_LIST: !Ref ContactListName
          REPLY_TO: !Ref ReplyToEmail
          BRAND_NAME: !Ref BrandName
          BROKERAGE: !Ref Brokerage
          BUSINESS_ADDRESS: !Ref BusinessAddress
          BUSINESS_PHONE: !Ref BusinessPhone
          BRAND_LOGO_URL: !Ref BrandLogoUrl
          HEADSHOT_URL: !Ref HeadshotUrl
      InlineCode: |
        import os, json, boto3, re
        ddb = boto3.resource('dynamodb'); ses = boto3.client('sesv2')
        table = ddb.Table(os.environ.get('LEADS_TABLE'))

        def strip_html(s): return re.sub('<[^<]+?>', '', s or '')

        def handler(event, context):
            body = event.get('body')
            if isinstance(body, str): body = json.loads(body or "{}")
            lead_id = (body or {}).get('leadId'); subject = (body or {}).get('subject'); message = (body or {}).get('message')
            if not all([lead_id, subject, message]): return {"statusCode":400,"body":json.dumps({"error":"leadId, subject, message required"})}
            it = table.get_item(Key={"LeadID": lead_id}).get('Item')
            if not it: return {"statusCode":404,"body":json.dumps({"error":"lead not found"})}
            if it.get("EmailDeliverability") == "bad": return {"statusCode":409,"body":json.dumps({"error":"suppressed","reason":"bad deliverability"})}
            email = it.get('Email')
            if not email: return {"statusCode":400,"body":json.dumps({"error":"lead has no email"})}
            data = {
                "subject": subject,
                "messageHtml": message,
                "textFallback": strip_html(message),
                "brandName": os.environ.get("BRAND_NAME",""),
                "brokerage": os.environ.get("BROKERAGE",""),
                "businessAddress": os.environ.get("BUSINESS_ADDRESS",""),
                "businessPhone": os.environ.get("BUSINESS_PHONE",""),
                "brandLogoUrl": os.environ.get("BRAND_LOGO_URL",""),
                "headshotUrl": os.environ.get("HEADSHOT_URL",""),
            }
            ses.send_email(
                FromEmailAddress=os.environ['FROM_EMAIL'],
                Destination={"ToAddresses":[email]},
                ReplyToAddresses=[os.environ['REPLY_TO']],
                ConfigurationSetName=os.environ['SES_CONFIG_SET'],
                ListManagementOptions={"ContactListName": os.environ["CONTACT_LIST"], "TopicName": "general"},
                EmailTags=[{"Name":"lead_id","Value":lead_id},{"Name":"campaign","Value":"manual"},{"Name":"lead_stage","Value":"manual"}],
                Content={"Template":{"TemplateName":"Manual_FollowUp","TemplateData":json.dumps(data)}}
            )
            return {"statusCode":200,"body":json.dumps({"ok":True})}
  TextractUploadUrlFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: textract-upload-url
      Runtime: python3.12
      Handler: index.handler
      Timeout: 15
      Policies:
        - !Ref TextractPolicy
      Environment:
        Variables:
          UPLOADS_BUCKET: !Sub ${ProjectName}-uploads-${AWS::AccountId}
      InlineCode: |
        import json, os, uuid, boto3, datetime
        s3 = boto3.client('s3'); BUCKET = os.environ['UPLOADS_BUCKET']

        def handler(event, context):
          body = event.get('body')
          if isinstance(body, str): body = json.loads(body or "{}")
          ext = ''; fn = (body or {}).get('filename') or ''
          if '.' in fn: ext = '.' + fn.rsplit('.',1)[1].lower()
          key = f"uploads/{datetime.datetime.utcnow().strftime('%Y%m%d-%H%M%S')}-{uuid.uuid4()}{ext}"
          ct = (body or {}).get('contentType') or 'application/octet-stream'
          url = s3.generate_presigned_url(
            'put_object',
            Params={'Bucket': BUCKET, 'Key': key, 'ContentType': ct},
            ExpiresIn=900
          )
          return { "statusCode": 200, "headers": {"Content-Type":"application/json"}, "body": json.dumps({"bucket": BUCKET, "key": key, "putUrl": url}) }
  TextractIngestFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: textract-ingest
      Runtime: python3.12
      Handler: index.handler
      Timeout: 120
      Policies:
        - !Ref TextractPolicy
        - !Ref DdbAccessPolicy
      Environment:
        Variables:
          UPLOADS_BUCKET: !Sub ${ProjectName}-uploads-${AWS::AccountId}
          LEADS_TABLE: !Ref LeadsTable
      Events:
        IngestOnUpload:
          Type: S3
          Properties:
            Bucket: !Ref UploadsBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/
      InlineCode: |
        import os, json, boto3, uuid, datetime, logging

        log = logging.getLogger()
        log.setLevel(logging.INFO)

        textract = boto3.client('textract')
        ddb = boto3.resource('dynamodb')
        TABLE = os.environ.get('LEADS_TABLE', 'Leads')
        table = ddb.Table(TABLE)

        def group_rows(blocks, y_thresh=0.025):
            words = [b for b in blocks if b.get('BlockType') == 'WORD']
            words.sort(key=lambda w: (w['Geometry']['BoundingBox']['Top'], w['Geometry']['BoundingBox']['Left']))
            rows = []
            for w in words:
                top = w['Geometry']['BoundingBox']['Top']
                if not rows or abs(top - rows[-1]['top']) > y_thresh:
                    rows.append({'top': top, 'items': [w]})
                else:
                    rows[-1]['items'].append(w)
            return rows

        def split_columns(row, n_cols=4):
            xs = [w['Geometry']['BoundingBox']['Left'] for w in row['items']]
            if not xs:
                return [''] * n_cols
            minx, maxx = min(xs), max(xs)
            width = max(1e-6, (maxx - minx))
            bins = [[] for _ in range(n_cols)]
            for w in row['items']:
                x = w['Geometry']['BoundingBox']['Left']
                idx = int((x - minx) / width * n_cols)
                if idx >= n_cols: idx = n_cols - 1
                bins[idx].append(w['Text'])
            return [" ".join(b).strip() for b in bins]

        def looks_like_header(cols):
            norm = [c.lower().replace(' ', '') for c in cols]
            expected = ['name','email','phone','source']
            match_count = sum(1 for a, b in zip(norm, expected) if a.startswith(b))
            return match_count >= 3

        def handler(event, context):
            added_total = 0
            failures = 0

            try:
                log.info({"records": len(event.get("Records", []))})
            except Exception:
                pass

            recs = event.get('Records', [])
            for rec in recs:
                try:
                    bkt = rec['s3']['bucket']['name']
                    key = rec['s3']['object']['key']
                    log.info({"processing": f"s3://{bkt}/{key}"})

                    resp = textract.detect_document_text(Document={'S3Object': {'Bucket': bkt, 'Name': key}})
                    rows = group_rows(resp.get('Blocks', []))

                    if rows:
                        first_cols = split_columns(rows[0], 4)
                        if looks_like_header(first_cols):
                            rows = rows[1:]

                    for r in rows:
                        name, email, phone, source = [c.strip() for c in (split_columns(r, 4) + ['','','',''])[:4]]
                        if not name and not email:
                            continue
                        lead_id = str(uuid.uuid4())
                        item = {
                            "LeadID": lead_id,
                            "Name": name,
                            "Email": email,
                            "Phone": phone,
                            "Source": source or "paper-upload",
                            "Notes": f"textract:{key}",
                            "CreatedAt": datetime.datetime.utcnow().isoformat(),
                            "OpenCount": 0,
                            "ClickCount": 0,
                            "Tags": ["Imported"]
                        }
                        table.put_item(Item=item)
                        added_total += 1

                    log.info({"s3key": key, "added": added_total})
                except Exception:
                    failures += 1
                    log.exception(f"Failed on record: {rec}")

            body = {"added": added_total, "failures": failures}
            log.info(body)
            return {"statusCode": 200, "body": json.dumps(body)}
  SesEventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ses-events-topic
  SesTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SesEventsTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowSESPublish
            Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: sns:Publish
            Resource: !Ref SesEventsTopic
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref AWS::AccountId
              StringLike:
                AWS:SourceArn: !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:configuration-set/*
  SesEventSubLambda:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SesEventsTopic
      Protocol: lambda
      Endpoint: !GetAtt EngagementUpdateFn.Arn
  AllowSNSToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EngagementUpdateFn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SesEventsTopic
  SendDripDailyRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 13 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt SendDripFn.Arn
          Id: senddrip
  PermEventToSendDrip:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendDripFn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SendDripDailyRule.Arn
  SegmentationDailyRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(15 13 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt SegmentationFn.Arn
          Id: segmentation
  PermEventToSegmentation:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SegmentationFn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SegmentationDailyRule.Arn
  SesEmailIdentity:
    Condition: CreateEmailIdentityTrue
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref SesFromEmail
  SesCfgSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: !Sub ${ProjectName}-config
      TrackingOptions: !If
        - HasLinkTrackingDomain
        - CustomRedirectDomain: !Ref LinkTrackingDomain
        - !Ref AWS::NoValue
  SesCfgSetEventDest:
    Type: AWS::SES::ConfigurationSetEventDestination
    Properties:
      ConfigurationSetName: !Ref SesCfgSet
      EventDestination:
        Name: sns-destination
        Enabled: true
        MatchingEventTypes:
          - SEND
          - DELIVERY
          - OPEN
          - CLICK
          - BOUNCE
          - COMPLAINT
        SnsDestination:
          TopicARN: !Ref SesEventsTopic
  SesTemplateDay0:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: Day0_Thanks
        SubjectPart: Thanks for visiting, {{#if name}}{{name}}{{else}}there{{/if}}!
        TextPart: |
          Hi {{#if name}}{{name}}{{else}}there{{/if}},
          Thanks for stopping by {{#if source}}{{source}}{{else}}our open house{{/if}}.
          ? {{#if brandName}}{{brandName}}{{else}}Your Realtor{{/if}} ({{businessPhone}})
          Unsubscribe: {{amazonSESUnsubscribeUrl}}
        HtmlPart: |
          <table role="presentation" width="100%" cellpadding="0" cellspacing="0" style="background:#f7f7f8;padding:24px 0;">
            <tr><td align="center">
              <table role="presentation" width="640" cellpadding="0" cellspacing="0" style="background:#ffffff;border-radius:12px;overflow:hidden;font-family:Arial,Helvetica,sans-serif;">
                <tr>
                  <td style="padding:16px 24px;border-bottom:1px solid #eee;">
                    <table width="100%" cellpadding="0" cellspacing="0"><tr>
                      <td style="font-size:18px;font-weight:700;vertical-align:middle;">
                        {{#if brandLogoUrl}}<img src="{{brandLogoUrl}}" alt="Logo" style="height:28px;vertical-align:middle;margin-right:8px;border-radius:4px;">{{/if}}
                        {{#if brandName}}{{brandName}}{{else}}Your Realtor{{/if}}
                      </td>
                      <td align="right" style="vertical-align:middle;">
                        {{#if headshotUrl}}<img src="{{headshotUrl}}" alt="Headshot" style="height:40px;width:40px;border-radius:50%;">{{/if}}
                      </td>
                    </tr></table>
                  </td>
                </tr>
                <tr>
                  <td style="padding:24px;font-size:16px;line-height:1.55;color:#222;">
                    <p>Hi {{#if name}}{{name}}{{else}}there{{/if}},</p>
                    <p>Thanks for stopping by {{#if source}}{{source}}{{else}}our open house{{/if}}. I?ll follow up with a few options.</p>
                    <p>? {{#if brandName}}{{brandName}}{{else}}Your Realtor{{/if}}</p>
                  </td>
                </tr>
                <tr>
                  <td style="padding:16px 24px;border-top:1px solid #eee;color:#666;font-size:12px;line-height:1.6;">
                    <div>{{#if brokerage}}{{brokerage}}{{/if}}</div>
                    <div>{{#if businessAddress}}{{businessAddress}}{{/if}} {{#if businessPhone}}? {{businessPhone}}{{/if}}</div>
                    <div>Don?t want these? <a href="{{amazonSESUnsubscribeUrl}}">Unsubscribe</a>.</div>
                  </td>
                </tr>
              </table>
            </td></tr>
          </table>
  SesTemplateDay2:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: Day2_FollowUp
        SubjectPart: Quick follow-up, {{#if name}}{{name}}{{else}}there{{/if}}
        TextPart: |
          Hi {{#if name}}{{name}}{{else}}there{{/if}},
          Just checking in ? any favorites so far?
          ? {{#if brandName}}{{brandName}}{{else}}Your Realtor{{/if}} ({{businessPhone}})
          Unsubscribe: {{amazonSESUnsubscribeUrl}}
        HtmlPart: |
          <table role="presentation" width="100%" cellpadding="0" cellspacing="0" style="background:#f7f7f8;padding:24px 0;">
            <tr><td align="center">
              <table role="presentation" width="640" cellpadding="0" cellspacing="0" style="background:#ffffff;border-radius:12px;overflow:hidden;font-family:Arial,Helvetica,sans-serif;">
                <tr><td style="padding:16px 24px;border-bottom:1px solid #eee;font-weight:700;">
                  {{#if brandLogoUrl}}<img src="{{brandLogoUrl}}" alt="Logo" style="height:28px;vertical-align:middle;margin-right:8px;border-radius:4px;">{{/if}}
                  {{#if brandName}}{{brandName}}{{else}}Your Realtor{{/if}}
                  <span style="float:right">{{#if headshotUrl}}<img src="{{headshotUrl}}" alt="Headshot" style="height:40px;width:40px;border-radius:50%;">{{/if}}</span>
                </td></tr>
                <tr><td style="padding:24px;font-size:16px;line-height:1.55;color:#222;">
                  <p>Hi {{#if name}}{{name}}{{else}}there{{/if}},</p>
                  <p>Just checking in ? any favorites so far?</p>
                </td></tr>
                <tr><td style="padding:16px 24px;border-top:1px solid #eee;color:#666;font-size:12px;line-height:1.6;">
                  <div>{{#if brokerage}}{{brokerage}}{{/if}}</div>
                  <div>{{#if businessAddress}}{{businessAddress}}{{/if}} {{#if businessPhone}}? {{businessPhone}}{{/if}}</div>
                  <div>Don?t want these? <a href="{{amazonSESUnsubscribeUrl}}">Unsubscribe</a>.</div>
                </td></tr>
              </table>
            </td></tr>
          </table>
  SesTemplateDay5:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: Day5_CheckIn
        SubjectPart: Still interested, {{#if name}}{{name}}{{else}}there{{/if}}?
        TextPart: |
          Hi {{#if name}}{{name}}{{else}}there{{/if}},
          Just making sure you saw my last note. Want me to send a short list?
          ? {{#if brandName}}{{brandName}}{{else}}Your Realtor{{/if}} ({{businessPhone}})
          Unsubscribe: {{amazonSESUnsubscribeUrl}}
        HtmlPart: |
          <table role="presentation" width="100%" cellpadding="0" cellspacing="0" style="background:#f7f7f8;padding:24px 0%;">
            <tr><td align="center">
              <table role="presentation" width="640" cellpadding="0" cellspacing="0" style="background:#ffffff;border-radius:12px;overflow:hidden;font-family:Arial,Helvetica,sans-serif;">
                <tr><td style="padding:16px 24px;border-bottom:1px solid #eee;font-weight:700;">
                  {{#if brandLogoUrl}}<img src="{{brandLogoUrl}}" alt="Logo" style="height:28px;vertical-align:middle;margin-right:8px;border-radius:4px;">{{/if}}
                  {{#if brandName}}{{brandName}}{{else}}Your Realtor{{/if}}
                  <span style="float:right">{{#if headshotUrl}}<img src="{{headshotUrl}}" alt="Headshot" style="height:40px;width:40px;border-radius:50%;">{{/if}}</span>
                </td></tr>
                <tr><td style="padding:24px;font-size:16px;line-height:1.55;color:#222;">
                  <p>Hi {{#if name}}{{name}}{{else}}there{{/if}},</p>
                  <p>Just making sure you saw my last note. Want me to send a short list?</p>
                </td></tr>
                <tr><td style="padding:16px 24px;border-top:1px solid #eee;color:#666;font-size:12px;line-height:1.6;">
                  <div>{{#if brokerage}}{{brokerage}}{{/if}}</div>
                  <div>{{#if businessAddress}}{{businessAddress}}{{/if}} {{#if businessPhone}}? {{businessPhone}}{{/if}}</div>
                  <div>Don?t want these? <a href="{{amazonSESUnsubscribeUrl}}">Unsubscribe</a>.</div>
                </td></tr>
              </table>
            </td></tr>
          </table>
  SesTemplateDay30:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: Day30_CheckIn
        SubjectPart: 30-day check-in
        TextPart: |
          Hi {{#if name}}{{name}}{{else}}there{{/if}},
          It's been a few weeks ? are you still exploring options?
          If you'd like, I can send refreshed picks based on your preferences.
          ? {{#if brandName}}{{brandName}}{{else}}Your Realtor{{/if}} ({{businessPhone}})
          Unsubscribe: {{amazonSESUnsubscribeUrl}}
        HtmlPart: |
          <table role="presentation" width="100%" cellpadding="0" cellspacing="0" style="background:#f7f7f8;padding:24px 0;">
            <tr><td align="center">
              <table role="presentation" width="640" cellpadding="0" cellspacing="0" style="background:#ffffff;border-radius:12px;overflow:hidden;font-family:Arial,Helvetica,sans-serif;">
                <tr><td style="padding:16px 24px;border-bottom:1px solid #eee;font-weight:700;">
                  {{#if brandLogoUrl}}<img src="{{brandLogoUrl}}" alt="Logo" style="height:28px;vertical-align:middle;margin-right:8px;border-radius:4px;">{{/if}}
                  {{#if brandName}}{{brandName}}{{else}}Your Realtor{{/if}}
                  <span style="float:right">{{#if headshotUrl}}<img src="{{headshotUrl}}" alt="Headshot" style="height:40px;width:40px;border-radius:50%;">{{/if}}</span>
                </td></tr>
                <tr><td style="padding:24px;font-size:16px;line-height:1.55;color:#222;">
                  <p>Hi {{#if name}}{{name}}{{else}}there{{/if}},</p>
                  <p>It's been a few weeks ? are you still exploring options?</p>
                  <p>If you'd like, I can send refreshed picks based on your preferences.</p>
                </td></tr>
                <tr><td style="padding:16px 24px;border-top:1px solid #eee;color:#666;font-size:12px;line-height:1.6%;">
                  <div>{{#if brokerage}}{{brokerage}}{{/if}}</div>
                  <div>{{#if businessAddress}}{{businessAddress}}{{/if}} {{#if businessPhone}}? {{businessPhone}}{{/if}}</div>
                  <div>Don?t want these? <a href="{{amazonSESUnsubscribeUrl}}">Unsubscribe</a>.</div>
                </td></tr>
              </table>
            </td></tr>
          </table>
  SesTemplateManual:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: Manual_FollowUp
        SubjectPart: '{{subject}}'
        TextPart: |
          {{#if textFallback}}{{textFallback}}{{else}}(No text version provided){{/if}}
          Unsubscribe: {{amazonSESUnsubscribeUrl}}
        HtmlPart: |
          <table role="presentation" width="100%" cellpadding="0" cellspacing="0" style="background:#f7f7f8;padding:24px 0;">
            <tr><td align="center">
              <table role="presentation" width="640" cellpadding="0" cellspacing="0" style="background:#ffffff;border-radius:12px;overflow:hidden;font-family:Arial,Helvetica,sans-serif;">
                <tr><td style="padding:16px 24px;border-bottom:1px solid #eee;font-weight:700;">
                  {{#if brandLogoUrl}}<img src="{{brandLogoUrl}}" alt="Logo" style="height:28px;vertical-align:middle;margin-right:8px;border-radius:4px;">{{/if}}
                  {{#if brandName}}{{brandName}}{{else}}Your Realtor{{/if}}
                  <span style="float:right">{{#if headshotUrl}}<img src="{{headshotUrl}}" alt="Headshot" style="height:40px;width:40px;border-radius:50%;">{{/if}}</span>
                </td></tr>
                <tr><td style="padding:24px;font-size:16px;line-height:1.55;color:#222;">
                  {{{messageHtml}}}
                </td></tr>
                <tr><td style="padding:16px 24px;border-top:1px solid #eee;color:#666;font-size:12px;line-height:1.6%;">
                  <div>{{#if brokerage}}{{brokerage}}{{/if}}</div>
                  <div>{{#if businessAddress}}{{businessAddress}}{{/if}} {{#if businessPhone}}? {{businessPhone}}{{/if}}</div>
                  <div>Don?t want these? <a href="{{amazonSESUnsubscribeUrl}}">Unsubscribe</a>.</div>
                </td></tr>
              </table>
            </td></tr>
          </table>
Outputs:
  LeadIntakeUrl:
    Description: HTTPS endpoint for creating a lead (Function URL)
    Value: !GetAtt LeadIntakeFnUrl.FunctionUrl
  QuickSendUrl:
    Description: HTTPS endpoint for manual follow-up send (Function URL)
    Value: !GetAtt QuickSendFnUrl.FunctionUrl
  ExportCsvUrl:
    Description: HTTPS endpoint to export leads to CSV (Function URL)
    Value: !GetAtt ExportCsvFnUrl.FunctionUrl
  TextractMintUploadUrl:
    Description: HTTPS endpoint to mint a pre-signed S3 upload URL (Function URL)
    Value: !GetAtt TextractUploadUrlFnUrl.FunctionUrl
  PublicSiteURL:
    Condition: UseCDN
    Value: !Sub https://${PublicSubdomain}.${DomainName}
  AdminSiteURL:
    Condition: UseCDN
    Value: !Sub https://${AdminSubdomain}.${DomainName}
  PublicSiteBucketName:
    Value: !Ref PublicSiteBucket
  AdminSiteBucketName:
    Value: !Ref AdminSiteBucket